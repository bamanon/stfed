from PySide6 import QtCore, QtGui, QtWidgets

import stfed.model
import stfed.factories.ani
import stfed.repos.resources
import stfed.factories.pal
from stfed.view.autogenerated.Ui_AniResourcePreview import Ui_AniResourcePreview
from stfed.repos.user_preferences import repo as user_preferences_repo
from stfed.view.ImageDelegate import ImageDelegate

PREVIEW_COLUMN_ID = 0
PREVIEW_DEFAULT_SIZE = 80, 80


class AniResourcePreview(QtWidgets.QWidget, Ui_AniResourcePreview):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.__pixmaps = []
        self.__resource = None
        self.__subscriptions = []
        headers = [
            "Preview",
            "Origin",
            "Width",
            "Height",
            "Priority"
        ]
        self.cels_table.setColumnCount(len(headers))
        self.cels_table.setHorizontalHeaderLabels(headers)
        self.cels_table.setItemDelegate(ImageDelegate(None))
        self.__subscriptions.append(
            user_preferences_repo.values().map_subscribe(
                lambda p: p.double_width_image_preview,
                self.__on_double_width_preview_pref_changed))
        self.cels_table.customContextMenuRequested.connect(self.__cels_table_context_menu_requested)
        

    def set_model(self, resource: stfed.model.Resource):
        ani = stfed.factories.ani.parse(resource)
        self.__resource = resource
        self.cels_table.setRowCount(0)
        self.cels_table.setRowCount(len(ani.cels))
        self.cels_table.setVerticalHeaderLabels([str(i) for i in range(len(ani.cels))])
        self.cels_table.setColumnWidth(PREVIEW_COLUMN_ID, PREVIEW_DEFAULT_SIZE[0])
        for r in range(len(ani.cels)):
            self.cels_table.setRowHeight(r, PREVIEW_DEFAULT_SIZE[1])
        
        self.__pixmaps.clear()

        #TODO: how to match
        palette = stfed.factories.pal.parse(
            stfed.repos.resources.resources_repo_instance.get(
                9100, stfed.model.ResourceType.PAL).data())

        for i, cel in enumerate(ani.cels):
            content = stfed.factories.ani.export_image(cel, palette)
            pixmap = QtGui.QPixmap()
            pixmap.loadFromData(content, 'PNG')
            self.__pixmaps.append(pixmap)
            scaled_pixmap = pixmap
            if user_preferences_repo.get().double_width_image_preview:
                scaled_pixmap = pixmap.scaled(pixmap.width() * 2, pixmap.height())

            self.cels_table.setItem(i, PREVIEW_COLUMN_ID, QtWidgets.QTableWidgetItem(scaled_pixmap, ""))
            self.cels_table.setItem(i, 1, QtWidgets.QTableWidgetItem(f"{(cel.header.org_x, cel.header.org_y)}"))
            self.cels_table.setItem(i, 2, QtWidgets.QTableWidgetItem(str(cel.header.width)))
            self.cels_table.setItem(i, 3, QtWidgets.QTableWidgetItem(str(cel.header.height)))
            self.cels_table.setItem(i, 4, QtWidgets.QTableWidgetItem(str(cel.header.priority)))


    def __on_double_width_preview_pref_changed(self, new_value: bool):
        for i in range(len(self.__pixmaps)):
            pixmap = self.__pixmaps[i]
            if new_value:
                pixmap = pixmap.scaled(pixmap.width() * 2, pixmap.height())
            self.cels_table.item(i, PREVIEW_COLUMN_ID).setIcon(pixmap)


    def destroy(self, destroyWindow: bool=True, destroySubWindows: bool=True) -> None:
        for s in self.__subscriptions:
            s.unsubscribe()
        return super().destroy(destroyWindow, destroySubWindows)


    def __cels_table_context_menu_requested(self, point: QtCore.QPoint):
        selected_item = self.cels_table.itemAt(point)
        row = selected_item.row()
        if selected_item is None:
            return
        menu = QtWidgets.QMenu(self)
        export_action = QtGui.QAction("Export CEL as...", self)
        export_action.triggered.connect(lambda _: self.__export_resource(row))
        menu.addAction(export_action)
        _ = menu.exec(self.cels_table.mapToGlobal(point))


    def __export_resource(self, cel_idx: int):
        pixmap: QtGui.QPixmap = self.__pixmaps[cel_idx]
        if user_preferences_repo.get().double_width_image_export:
            pixmap = pixmap.scaled(pixmap.width() * 2, pixmap.height() * 2)
        filename = f"{self.__resource.resource_name}_{cel_idx}.png"
        filters=f"PNG files *.PNG (*.PNG);; All Files (*)"
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(self, None, filename, filter=filters)
        if filename is None or filename == '':
            return
        f = QtCore.QFile(filename)
        f.open(QtCore.QIODevice.OpenModeFlag.WriteOnly)
        pixmap.save(f, "PNG")
        f.close()

