import dataclasses
import itertools
import re
import typing
import traceback

from PySide6 import QtCore, QtGui, QtWidgets
import reactivex

import stfed.factories.import_formats
import stfed.factories.export_formats
import stfed.factories.factory_methods
import stfed.factories.preview
import stfed.factories.mif
import stfed.model
import stfed.repos.preview_images
import stfed.repos.user_preferences
import stfed.repos.resources
import stfed.services.localization
from stfed.view.autogenerated.Ui_MainWindow import Ui_MainWindow
import stfed.view.AboutWindow
import stfed.view.FirstTimeSetupWindow
import stfed.view.BackgroundOperationWindow
import stfed.view.PreferencesWindow
import stfed.view.LocalizationImportWizardWindow


class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.__user_prefs_repo = stfed.repos.user_preferences.repo
        self.__resources_repo = stfed.repos.resources.resources_repo_instance
        self.__dialog: typing.Optional[QtWidgets.QWidget] = None
        self.__subscriptions = []

        self.action_file_open.triggered.connect(self.__file_open_clicked)
        self.action_file_save.triggered.connect(self.__file_save_clicked)
        self.action_file_save_as.triggered.connect(self.__file_save_as_clicked)
        self.action_file_quit.triggered.connect(self.__file_quit_clicked)
        self.action_help_about.triggered.connect(self.__help_about_clicked)
        self.action_tools_preferences.triggered.connect(self.__tools_preferences_clicked)
        # self.action_tools_localization_export_english.triggered.connect(self.__export_english_localization_clicked)
        # self.action_tools_localization_export_german.triggered.connect(self.__export_german_localization_clicked)
        # self.action_tools_localization_export_french.triggered.connect(self.__export_french_localization_clicked)
        # self.action_tools_localization_mass_import.triggered.connect(self.__localization_mass_import_clicked)
        self.tree_widget.currentItemChanged.connect(self.__tree_current_item_changed)
        self.tree_widget.customContextMenuRequested.connect(self.__tree_widget_context_menu_requested)
        self.filter_edit.textChanged.connect(self.__filter_edit_text_changed)

        self.__subscriptions.append(
            self.__user_prefs_repo.values().subscribe(
                lambda up: self.__on_recent_files_changed(up.recent_files)))
        
        self.__subscriptions.append(
            reactivex.combine_latest(
                self.__resources_repo.source_path_o(),
                self.__resources_repo.is_dirty_o()
            ).subscribe(self.__on_title_needs_refresh))
        
        self.__subscriptions.append(
            reactivex.combine_latest(
                self.__resources_repo.source_path_o(),
                self.__resources_repo.is_dirty_o()
            ).subscribe(self.__save_menus_need_refresh))
        
        if not self.__user_prefs_repo.is_setup():
            self.__dialog = stfed.view.FirstTimeSetupWindow.FirstTimeSetupWindow()
            self.__dialog.show()


    def __open_file(self, filename):
        user_prefs = self.__user_prefs_repo.get()
        recent_files = user_prefs.recent_files.copy()
        if not filename in recent_files:
            if(len(recent_files) > 5):
                recent_files.pop()
            recent_files.insert(0, filename)
        else:
            recent_files.remove(filename)
            recent_files.insert(0, filename)
        user_prefs = dataclasses.replace(user_prefs, recent_files=recent_files)
        self.__user_prefs_repo.update(user_prefs)

        self.filter_edit.clear()
        self.__resources_repo.initialize(filename, user_prefs.lookup_paths)
        
        resources = self.__resources_repo.all_resources()
        self.__display_resources(resources)
        current_preview = self.scroll_area.widget()
        if current_preview is not None:
            current_preview.destroy()
        stfed.repos.preview_images.preview_images_repo_instance.invalidate_all()


    def __display_resources(self, resources):
        self.tree_widget.clear()
        grouped_by_source = [
            (k, list(vs))
            for k, vs in itertools.groupby(resources, key=lambda x: x.source_filename())
        ]
        top_level_items = []
        for source, resources in  grouped_by_source:
            top_level = QtWidgets.QTreeWidgetItem(self.tree_widget)
            top_level.setText(0, source)
            top_level_items.append(top_level)
            for resource in resources:
                item = QtWidgets.QTreeWidgetItem(top_level)
                item.setText(0, resource.label())
                
        self.tree_widget.clearSelection()
        while True:
            item = self.tree_widget.takeTopLevelItem(0)
            if item is None:
                break
            self.tree_widget.removeItemWidget(item, 0)

        self.tree_widget.insertTopLevelItems(0, top_level_items)
        self.tree_widget.expandAll()
        current_preview = self.scroll_area.widget()
        if current_preview is not None:
            current_preview.destroy()


    def __handle_unsaved_changes(self):
        if self.__resources_repo.is_dirty():
            reply = QtWidgets.QMessageBox.question(
                self,
                "Unsaved changes",
                f"The file {self.__resources_repo.source_path()} has been modified. Do you want to save it?",
                QtWidgets.QMessageBox.StandardButton.Yes|QtWidgets.QMessageBox.StandardButton.No|QtWidgets.QMessageBox.StandardButton.Cancel)
            if reply == QtWidgets.QMessageBox.StandardButton.Yes:
                self.__resources_repo.commit()
            return reply
        return None
        

    def __file_open_clicked(self):
        if self.__handle_unsaved_changes() == QtWidgets.QMessageBox.StandardButton.Cancel:
            return
        filter_ = ';; '.join([
            "STF files *.STF (*.STF)",
            "MAP files *.MAP (*.MAP)",
            #"IDX files *.IDX (*.IDX)",
            "All Files (*)"
        ])
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(
            self,
            filter=filter_)
        if filename is None or filename == '':
            return
        self.__open_file(filename)

        
    def __set_preview_widget(self, resource: stfed.model.Resource):
        preview_widget = stfed.factories.preview.get_widget_for_resource_type(
            stfed.model.ResourceType(resource.resource_type))
        current_preview = self.scroll_area.widget()
        if current_preview is not None:
            current_preview.destroy()
        self.scroll_area.setWidget(preview_widget)

        try:
            preview_widget.set_model(resource)
        except:
            traceback.print_exc()
            QtWidgets.QMessageBox.critical(
                 self,
                 'Error - stfed',
                 'Error: creating a preview failed')
            if current_preview is not None:
                current_preview.destroy()
            preview_widget = stfed.view.DefaultResourcePreview()
            self.scroll_area.setWidget(preview_widget)
            preview_widget.set_model(resource)
            
    
    def __tree_current_item_changed(self, current: QtWidgets.QTreeWidgetItem, previous: QtWidgets.QTreeWidgetItem):
        if current is None:
            return
        parent = current.parent()
        if parent is None:
            return
        parts = current.text(0).split('.')
        rn = int(parts[0])
        rt = getattr(stfed.model.ResourceType, parts[1]).value
        source_file = parent.text(0)
        record = self.__resources_repo.get(rn, stfed.model.ResourceType(rt), source_file)
        if record is None:
            return
        self.__set_preview_widget(record)


    #TODO: refactor to a service
    def __export_resource(self, resource_name):
        rn, ext = resource_name.split('.')
        rn = int(rn)
        rt = getattr(stfed.model.ResourceType, ext)
        resource = self.__resources_repo.get(rn, rt)

        export_formats = stfed.factories.export_formats.get_export_formats_for_resource(rt)
        available_filters = ";; ".join([t[0] for t in export_formats])
        ext = export_formats[0][0].split('(')[1].split(')')[0].split('.')[1]
        filename, selected_filter = QtWidgets.QFileDialog.getSaveFileName(
            self,
            None,
            f"{rn}.{ext}",
            filter=available_filters)
        if filename is None or filename == '':
            return
        filter_id = -1
        for i, format_name in [(i, t[0]) for i, t in enumerate(export_formats)]:
            if format_name == selected_filter:
                filter_id = i
                break
        _, export_func, required_export_params = export_formats[filter_id]
        parameters = [resource]
        for extra_param in required_export_params:
            if extra_param == 'pal':
                #TODO: make it user-selectable
                if rt == stfed.model.ResourceType.TLB:
                    pal_resource = self.__resources_repo.get(rn, stfed.model.ResourceType.PAL)
                else:
                    pal_resource = self.__resources_repo.get(9100, stfed.model.ResourceType.PAL)
                parameters.append(pal_resource)
            else:
                raise Exception("Unknown export parameter: " + extra_param)
        converted_data = export_func(*parameters)
        with open(filename, 'wb') as f:
            f.write(converted_data)

    #TODO: refactor to a service
    def __import_resource(self, resource_name: str):    
        rn, ext = resource_name.split('.')
        rn = int(rn)
        rt = getattr(stfed.model.ResourceType, ext)
        old_resource = self.__resources_repo.get(rn, rt)

        filter_ = ';; '.join(
            stfed.factories.import_formats.get_file_filters_for_resource_import(rt))
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(self, None, filter=filter_)
        if filename is None or filename == '':
            return
        
        func = stfed.factories.import_formats.get_import_func(filename, rt)
        issues, new_resource = func(filename, rn, rt)

        if any(i.severity == stfed.model.Severity.Critical for i in issues):
            msg = f'Error: {" ".join(i.text for i in issues)} Import aborted.'
            QtWidgets.QMessageBox.critical(self, 'Error - stfed', msg)
            return 
        elif len(issues) > 0:
            msg = f'Error: {" ".join(i.text for i in issues)} Do you want to continue?'
            reply = QtWidgets.QMessageBox.warning(
                self,
                'stfed',
                msg,
                QtWidgets.QMessageBox.StandardButton.Yes|QtWidgets.QMessageBox.StandardButton.No)
            if reply == QtWidgets.QMessageBox.StandardButton.No:
                return
            
        self.__resources_repo.update(new_resource)

        #TODO: add reactivity (subscribe to dependent observables in preview_images_repo?)
        tlb_rns = []
        mif_rns = []         
        if rt == stfed.model.ResourceType.MIF:
            mif_rns.append(rn)
        elif rt == stfed.model.ResourceType.TLB:
            tlb_rns.append(rn)
            mif_rns = mif_rns + [rn+10, rn+12, rn+15]  
        elif rt == stfed.model.ResourceType.PAL and rn != 9101:
            tlb_rns.append(rn)
            mif_rns = mif_rns + [rn+10, rn+12, rn+15]
        elif rt == stfed.model.ResourceType.PAL and rn == 9101:
            for tlb_rn in  range(9100, 9421, 20):
                tlb_rns.append(tlb_rn)
                mif_rns = mif_rns + [tlb_rn+10, tlb_rn+12, tlb_rn+15]
        for mif_rn in mif_rns:
            stfed.repos.preview_images.preview_images_repo_instance.invalidate(
                self.__resources_repo.source_path(), mif_rn, stfed.model.ResourceType.MIF)
        for tlb_rn in  tlb_rns:
            stfed.repos.preview_images.preview_images_repo_instance.invalidate_matching(
                self.__resources_repo.source_path(), tlb_rn, stfed.model.ResourceType.TLB)

        self.__set_preview_widget(new_resource)


    def __tree_widget_context_menu_requested(self, point: QtCore.QPoint):
        selected_item = self.tree_widget.itemAt(point)
        if selected_item is None:
            return
        menu = QtWidgets.QMenu(self)
        export_action = QtGui.QAction("Export", self)
        export_action.triggered.connect(lambda _: self.__export_resource(selected_item.text(0)))
        menu.addAction(export_action)
        import_action = QtGui.QAction("Import", self)
        import_action.triggered.connect(lambda _: self.__import_resource(selected_item.text(0)))
        menu.addAction(import_action)
        # TODO: resource-type specific actions
        # for action in self.__get_custom_actions_for_resource(self.__get_resource_type(selected_item), selected_item.text(0)):
        #     menu.addAction(action)
        selected_action = menu.exec(self.tree_widget.mapToGlobal(point))


    def __file_quit_clicked(self):
        self.close()


    def closeEvent(self, event: QtGui.QCloseEvent) -> None:
        if self.__handle_unsaved_changes() == QtWidgets.QMessageBox.StandardButton.Cancel:
            return
        for s in self.__subscriptions:
            s.dispose()
        return super().closeEvent(event)


    def __help_about_clicked(self):
        self.__dialog = stfed.view.AboutWindow.AboutWindow()
        self.__dialog.show()


    def __tools_preferences_clicked(self):
        self.__dialog = stfed.view.PreferencesWindow.PreferencesWindow()
        self.__dialog.show()


    def __filter_edit_text_changed(self):
        filter_value = re.escape(self.filter_edit.text()).replace('\\*', '.*').replace(' ', '').upper()
        filtered_resources = [
            r for r in self.__resources_repo.all_resources()
            if re.match(filter_value, r.label()) is not None
        ]
        self.__display_resources(filtered_resources)


    def __on_recent_files_changed(self, recent_files: typing.List[str]):
        self.menu_file_open_recent.setEnabled(len(recent_files) > 0)
        for action in self.menu_file_open_recent.actions():
            self.menu_file_open_recent.removeAction(action)
        for recent_file in recent_files:
            action = QtGui.QAction(recent_file, self.menu_file_open_recent)
            action.triggered.connect((lambda arg: lambda: self.__open_file(arg))(recent_file))
            self.menu_file_open_recent.addAction(action)
            

    def __on_title_needs_refresh(self, t: typing.Tuple[typing.Optional[str], bool]):
        source_path, is_dirty = t
        if source_path is None:
            title = 'stfed'
        else:
            prefix = '*' if is_dirty else ''
            just_filename = source_path.split('/')[-1]
            title = f"{prefix}{just_filename} - stfed"
        self.setWindowTitle(title)
    

    def __save_menus_need_refresh(self, t: typing.Tuple[typing.Optional[str], bool]):
        source_path, is_dirty = t
        self.action_file_save.setEnabled(is_dirty)
        self.action_file_save_as.setEnabled(source_path is not None)
        #self.menu_localization.setEnabled(source_path is not None)


    def __file_save_clicked(self):
        self.__resources_repo.commit()
        

    def __file_save_as_clicked(self):
        filter_ = ';; '.join([
            "STF files *.STF (*.STF)",
            "MAP files *.MAP (*.MAP)",
        ])
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(
            self,
            filter=filter_)
        if filename is None or filename == '':
            return
        filename = filename.split('.')[0] + '.STF'
        self.__resources_repo.commit(filename)
        self.__open_file(filename)


    def __export_english_localization_clicked(self):
        self.__export_localization(stfed.model.Language.ENGLISH)


    def __export_german_localization_clicked(self):
        self.__export_localization(stfed.model.Language.GERMAN)


    def __export_french_localization_clicked(self):
        self.__export_localization(stfed.model.Language.FRENCH)


    def __export_localization(self, language: stfed.model.Language):
        content = stfed.services.localization.export_language_as_json(language)
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(
            self,
            None,
            f"{language.name}.json",
            filter="JSON files *.json (*.json)")
        if filename is None or filename == '':
            return
        with open(filename, 'w') as f:
            f.write(content)


    def __localization_mass_import_clicked(self):
        filter_ = ';; '.join([
            "JSON files *.json (*.json)",
            "All Files (*)"
        ])
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(
            self,
            filter=filter_)
        if filename is None or filename == '':
            return
        self.__dialog = stfed.view.LocalizationImportWizardWindow.LocalizationImportWizardWindow()
        self.__dialog.set_model(filename)
        self.__dialog.show()
