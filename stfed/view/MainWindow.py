import dataclasses
import itertools
import re

from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtWidgets import QMenu
from PySide6.QtCore import QPoint
from PySide6.QtGui import QAction

import stfed.state
import stfed.factories.export_formats
import stfed.factories.preview
import stfed.factories.mif
import stfed.model
import stfed.repos.resources
from stfed.view.autogenerated.Ui_MainWindow import Ui_MainWindow
import stfed.view.AboutWindow
import stfed.view.FirstTimeSetupWindow
import stfed.view.BackgroundOperationWindow
import stfed.view.PreferencesWindow
import stfed.repos.preview_images
import stfed.repos.user_preferences


class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__()
        self.setupUi(self)
        self.__user_prefs_repo = stfed.repos.user_preferences.repo
        self.__resources_repo = stfed.repos.resources.resources_repo_instance
        self.__dialog: QtWidgets.QWidget|None = None
        self.__subscriptions = []

        self.action_file_open.triggered.connect(self.__file_open_clicked)
        self.action_file_quit.triggered.connect(self.__file_quit_clicked)
        self.action_help_about.triggered.connect(self.__help_about_clicked)
        self.action_tools_preferences.triggered.connect(self.__tools_preferences_clicked)

        self.tree_widget.currentItemChanged.connect(self.__tree_current_item_changed)
        self.tree_widget.customContextMenuRequested.connect(self.__tree_widget_context_menu_requested)
        self.filter_edit.textChanged.connect(self.__filter_edit_text_changed)

        self.__subscriptions.append(
            self.__user_prefs_repo.values().map_subscribe(
                lambda user_preferences: user_preferences.recent_files,
                self.__on_recent_files_changed))

        if not self.__user_prefs_repo.is_setup():
            self.__dialog = stfed.view.FirstTimeSetupWindow.FirstTimeSetupWindow()
            self.__dialog.show()
            

    def __open_file(self, filename):
        
        user_prefs = self.__user_prefs_repo.get()
        
        recent_files = user_prefs.recent_files.copy()
        if not filename in recent_files:
            if(len(recent_files) > 5):
                recent_files.pop()
            recent_files.insert(0, filename)
        else:
            recent_files.remove(filename)
            recent_files.insert(0, filename)
        user_prefs = dataclasses.replace(user_prefs, recent_files=recent_files)
        self.__user_prefs_repo.update(user_prefs)
        just_filename = filename.split('/')[-1]
        self.setWindowTitle(just_filename + ' - stfed')

        self.filter_edit.clear()
        self.__resources_repo.initialize(filename, user_prefs.lookup_paths)
        
        resources = self.__resources_repo.all_resources()
        self.__display_resources(resources)

    def __display_resources(self, resources):
        self.tree_widget.clear()
        grouped_by_source = [
            (k, list(vs))
            for k, vs in itertools.groupby(resources, key=lambda x: x.source_filename())
        ]
        top_level_items = []
        for source, resources in  grouped_by_source:
            top_level = QtWidgets.QTreeWidgetItem(self.tree_widget)
            top_level.setText(0, source)
            top_level_items.append(top_level)
            for resource in resources:
                item = QtWidgets.QTreeWidgetItem(top_level)
                item.setText(0, resource.label())
                
        self.tree_widget.clearSelection()
        while True:
            item = self.tree_widget.takeTopLevelItem(0)
            if item is None:
                break
            self.tree_widget.removeItemWidget(item, 0)

        self.tree_widget.insertTopLevelItems(0, top_level_items)
        self.tree_widget.expandAll()
        current_preview = self.scroll_area.widget()
        if current_preview is not None:
            current_preview.destroy()

    def __file_open_clicked(self):
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(
            self,
            filter=f"STF files *.STF (*.STF);; MAP files *.MAP (*.MAP);; IDX files *.IDX (*.IDX);; All Files (*)")
        if filename is None or filename == '':
            return
        self.__open_file(filename)

        
    def __tree_current_item_changed(self, current: QtWidgets.QTreeWidgetItem, previous: QtWidgets.QTreeWidgetItem):
        if current is None:
            return
        parent = current.parent()
        if parent is None:
            return
        parts = current.text(0).split('.')
        rn = int(parts[0])
        rt = getattr(stfed.model.ResourceType, parts[1]).value
        source_file = parent.text(0)
        record = self.__resources_repo.get(rn, stfed.model.ResourceType(rt), source_file)
        if record is None:
            return
        preview_widget = stfed.factories.preview.get_widget_for_resource_type(stfed.model.ResourceType(record.resource_type))
        current_preview = self.scroll_area.widget()
        if current_preview is not None:
            current_preview.destroy()
        self.scroll_area.setWidget(preview_widget)

        preview_widget.set_model(record)


    def __export_resource(self, resource_name):
        rn, ext = resource_name.split('.')
        rn = int(rn)
        rt = getattr(stfed.model.ResourceType, ext)
        resource = self.__resources_repo.get(rn, rt)

        export_formats = stfed.factories.export_formats.get_export_formats_for_resource(rt)
        available_filters = ";; ".join([t[0] for t in export_formats])

        filename, selected_filter = QtWidgets.QFileDialog.getSaveFileName(
            self,
            None,
            resource_name,
            filter=available_filters)
        if filename is None or filename == '':
            return
        filter_id = -1
        for i, f in [(i, t[0]) for i, t in enumerate(export_formats)]:
            if f == selected_filter:
                filter_id = i
                break
        converted_data = export_formats[filter_id][1](resource)
        with open(filename, 'wb') as f:
            f.write(converted_data)


    def __tree_widget_context_menu_requested(self, point: QPoint):
        selected_item = self.tree_widget.itemAt(point)
        if selected_item is None:
            return
        menu = QMenu(self)
        export_action = QAction("Export", self)
        export_action.triggered.connect(lambda _: self.__export_resource(selected_item.text(0)))
        menu.addAction(export_action)
        # TODO: resource-type specific actions
        # for action in self.__get_custom_actions_for_resource(self.__get_resource_type(selected_item), selected_item.text(0)):
        #     menu.addAction(action)
        selected_action = menu.exec(self.tree_widget.mapToGlobal(point))


    def __file_quit_clicked(self):
        self.close()

    def closeEvent(self, event: QtGui.QCloseEvent) -> None:
        for s in self.__subscriptions:
            s.unsubscribe()
        return super().closeEvent(event)


    def __help_about_clicked(self):
        self.__dialog = stfed.view.AboutWindow.AboutWindow()
        self.__dialog.show()

    def __tools_preferences_clicked(self):
        self.__dialog = stfed.view.PreferencesWindow.PreferencesWindow()
        self.__dialog.show()

    def __filter_edit_text_changed(self):
        filter_value = re.escape(self.filter_edit.text()).replace('\\*', '.*').replace(' ', '').upper()
        filtered_resources = [
            r for r in self.__resources_repo.all_resources()
            if re.match(filter_value, r.label()) is not None
        ]
        self.__display_resources(filtered_resources)


    def __on_recent_files_changed(self, recent_files: list[str]):
        self.menu_file_open_recent.setEnabled(len(recent_files) > 0)
        for action in self.menu_file_open_recent.actions():
            self.menu_file_open_recent.removeAction(action)
        for recent_file in recent_files:
            action = QAction(recent_file, self.menu_file_open_recent)
            action.triggered.connect((lambda arg: lambda: self.__open_file(arg))(recent_file))
            self.menu_file_open_recent.addAction(action)
            