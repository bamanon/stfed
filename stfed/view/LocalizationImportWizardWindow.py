from typing import Optional, List, Tuple

import reactivex
import reactivex.subject
from PySide6 import QtCore, QtGui, QtWidgets

from stfed.model import Language, ImportIssue, Severity, SquibResource
import stfed.services.localization
from stfed.view.autogenerated.Ui_LocalizationImportWizardWindow import Ui_LocalizationImportWizardWindow


class LocalizationImportWizardWindow(QtWidgets.QWidget, Ui_LocalizationImportWizardWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.apply_button.clicked.connect(self.__apply_clicked)
        self.cancel_button.clicked.connect(self.__cancel_clicked)
        self.english_radio.toggled.connect(self.__english_radio_toggled)
        self.german_radio.toggled.connect(self.__german_radio_toggled)
        self.french_radio.toggled.connect(self.__french_radio_toggled)
        self.__subscriptions = []
        self.__squids_subject = reactivex.subject.BehaviorSubject[List[SquibResource]]([])
        self.__issues_subject = reactivex.subject.BehaviorSubject[List[ImportIssue]]([])
        self.__selected_language_subject = reactivex.subject.BehaviorSubject[Optional[Language]](None)

        self.__subscriptions.append(
            reactivex.combine_latest(
                self.__issues_subject,
                self.__selected_language_subject
            ).subscribe(
                self.__apply_button_enabled_needs_update))
        
        self.__subscriptions.append(
            reactivex.combine_latest(
                self.__squids_subject,
                self.__selected_language_subject
            ).subscribe(
                self.__preview_table_needs_update))
        
        self.__subscriptions.append(
            self.__selected_language_subject.subscribe(
                self.__selected_language_subject_changed))


    def set_model(self, filename: str) -> None:
        maybe_lang = stfed.services.localization.guess_language_from_json(filename)
        self.__selected_language_subject.on_next(maybe_lang)

        issues, sqbs = stfed.services.localization.try_import_language_from_json(filename, maybe_lang if maybe_lang is not None else stfed.model.Language.ENGLISH)
        self.__squids_subject.on_next(sqbs)
        self.__issues_subject.on_next(issues)

        # subscribe to issues_sub for uniformity
        self.issues_table.setColumnCount(2)
        self.issues_table.setHorizontalHeaderLabels(["Severity", "Message"])
        self.issues_table.setRowCount(len(issues))
        for i, issue in enumerate(issues):
            self.issues_table.setItem(i, 0, QtWidgets.QTableWidgetItem(issue.severity.name.upper()))
            self.issues_table.setItem(i, 1, QtWidgets.QTableWidgetItem(issue.text))
        self.issues_table.resizeRowsToContents()


    def keyPressEvent(self, event: QtGui.QKeyEvent) -> None:
        if event.key() == QtGui.Qt.Key.Key_Escape:
            self.close()
            return
        return super().keyPressEvent(event)
    

    def __apply_clicked(self):
        stfed.services.localization.save_imported_sqbs(
            self.__squids_subject.value,
            self.__selected_language_subject.value)
        self.close()


    def __cancel_clicked(self):
        self.close()

    
    def __english_radio_toggled(self, checked):
        self.__language_radio_toggled(checked, Language.ENGLISH)


    def __german_radio_toggled(self, checked):
        self.__language_radio_toggled(checked, Language.GERMAN)


    def __french_radio_toggled(self, checked):
        self.__language_radio_toggled(checked, Language.FRENCH)


    def __language_radio_toggled(self, checked: bool, language: Language):
        if checked and self.__selected_language_subject.value != language:
            self.__selected_language_subject.on_next(language)


    def __preview_table_needs_update(self, params: Tuple[List[SquibResource], Optional[Language]]):
        squib_res_list, selected_language = params
        if selected_language is not None:
            squib_res_list = stfed.services.localization.replace_language(squib_res_list, selected_language)
        preview_model = [
            (sqb.resource_name, squib_id, text)
            for sqb in squib_res_list
            for squib_id, text in sqb.squibs.items()
        ]
        self.preview_table.setColumnCount(3)
        self.preview_table.setHorizontalHeaderLabels(["Resource", "Squib Id", "Translation"])
        self.preview_table.setRowCount(len(preview_model))
        for i, t in enumerate(preview_model):
            self.preview_table.setItem(i, 0, QtWidgets.QTableWidgetItem(str(t[0])))
            self.preview_table.setItem(i, 1, QtWidgets.QTableWidgetItem(str(t[1])))
            self.preview_table.setItem(i, 2, QtWidgets.QTableWidgetItem(str(t[2])))
        self.preview_table.resizeRowsToContents()


    def destroy(self, destroyWindow: bool=True, destroySubWindows: bool=True) -> None:
        for s in self.__subscriptions:
            s.dispose()
        return super().destroy(destroyWindow, destroySubWindows)
    

    def __apply_button_enabled_needs_update(self, params: Tuple[List[ImportIssue], Optional[Language]]):
        import_issues, maybe_language = params
        no_crit_errors = not any(i for i in import_issues if i.severity == Severity.Critical)
        enabled = no_crit_errors and maybe_language is not None
        self.apply_button.setEnabled(enabled)


    def __selected_language_subject_changed(self, maybe_lang: Optional[Language]):
        self.english_radio.setChecked(maybe_lang == stfed.model.Language.ENGLISH)
        self.german_radio.setChecked(maybe_lang == stfed.model.Language.GERMAN)
        self.french_radio.setChecked(maybe_lang == stfed.model.Language.FRENCH)
